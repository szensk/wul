(defn do-flatten (l rl) 
	(let f (first l)
		(if (= nil f) 
			(then rl)
			(else 
				(if (= (type f) List)
					(then (do-flatten (rem l) (.. rl (do-flatten f ()))))
					(else (do-flatten (rem l) (.. rl (f))))
				)
			)
		)
	)
)

(defn flatten (l) (do-flatten l ()))

(let list (1 2 (2 3) (3 (4 5)))
	(print (flatten list)) ; prints (1 2 2 3 3 4 5)
	(print (+ (unpack (flatten list)))) ; prints 20
)