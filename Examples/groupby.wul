(defn groupby-internal (groups)
    (lambda (both)
        (let key (first both)
        (let val (last both)
        (if (not (contains? groups key))
            (then (set groups key (list))))
        (push (at groups key) val)
    )))
)

(defn groupby (list callback)
    (let keylist (map list callback)
    (let bothlist (zip keylist list)
    (let groups (dict)
    (let groupby-func (groupby-internal groups)
    (map bothlist groupby-func)
    (return groups)
)))))

(def l (zip (1 2 1 1) (4 5 6)))
(def grouped (groupby l first))
(map grouped (-> (key value) (do 
    (print "Grouping '{key}' has {(# value)} items:")
    (map value (-> (item) (print "\t{item}")))
)))
